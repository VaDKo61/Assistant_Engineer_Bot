from aiogram import Router, F
from aiogram.enums import ContentType
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.types import CallbackQuery, Message
from sqlalchemy.ext.asyncio import AsyncSession

from database.orm_query import orm_add_block, orm_get_blocks_object
from keyboards.keyboard_utils_object_block import inline_kb_choose_engineer, ObjectCallbackFactory, \
    BlockLookCallbackFactory, \
    inline_kb_object_block
from states.states import FSMFillBlock

router_block = Router()


@router_block.callback_query(F.data.startswith('add_block'), StateFilter(default_state))
async def process_add_block_command(callback: CallbackQuery, state: FSMContext):
    await state.update_data(object_id=callback.data.split('.')[-1])
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–º—è —É–∑–ª–∞:')
    await state.set_state(FSMFillBlock.name)


@router_block.message(StateFilter(FSMFillBlock.name), F.content_type == ContentType.TEXT)
async def process_name_sent(message: Message, state: FSMContext, session: AsyncSession):
    await state.update_data(name=message.text)
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞ —É–∑–µ–ª:',
                         reply_markup=await inline_kb_choose_engineer(session))
    await state.set_state(FSMFillBlock.engineer)


@router_block.message(StateFilter(FSMFillBlock.name))
async def warning_not_name(message: Message):
    await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è —É–∑–ª–∞!\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è —É–∑–ª–∞.\n–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö - /cancel')


@router_block.callback_query(ObjectCallbackFactory.filter(), StateFilter(FSMFillBlock.engineer))
async def process_engineer_sent(callback: CallbackQuery, callback_data: ObjectCallbackFactory, state: FSMContext,
                                session: AsyncSession):
    await state.update_data(engineer_id=callback_data.id)
    data = await state.get_data()
    try:
        await orm_add_block(data, session)
        await callback.message.edit_text('‚ûï –£–∑–µ–ª –¥–æ–±–∞–≤–ª–µ–Ω.')
        await state.clear()
    except Exception as e:
        await callback.message.answer(f'–û—à–∏–±–∫–∞ {e}')
        await state.clear()


@router_block.message(StateFilter(FSMFillBlock.engineer, FSMFillBlock.engineer))
async def warning_not_engineer(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–∂–µ–Ω–µ—Ä–∞ –≤—ã—à–µ!\n–û—Ç–º–µ–Ω–∏—Ç—å –≤–Ω–µ—Å–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö - /cancel')


@router_block.callback_query(BlockLookCallbackFactory.filter(), StateFilter(default_state))
async def process_list_get_object_block(callback: CallbackQuery, callback_data: ObjectCallbackFactory,
                                        session: AsyncSession):
    blocks = await orm_get_blocks_object(callback_data.id, session)
    await callback.message.delete()
    await callback.message.answer(text=f'üîª {callback.message.text.split("–ò–Ω–∂–µ–Ω–µ—Ä")[0]}')
    for block in blocks:
        await callback.message.answer(text=f'–£–∑–µ–ª: {block.name}'
                                           f'\n–ò–Ω–∂–µ–Ω–µ—Ä: {block.engineer.firstname} {block.engineer.surname}'
                                           f'\n–°—Ç–∞—Ç—É—Å: {"‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω" if block.checked else "‚ùå –ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω"}',
                                      reply_markup=await inline_kb_object_block(block))
